import csv
from os.path import join

from treemap.models import Species
from math import floor
"""
ID	-number
POINT_X	-EPSG:4326
POINT_Y	-EPSG:4326
GENUS	-text,casesensitive
SPECIES	-text,casesensitive
CULTIVAR-text,noquotationmarks,casesensitive
GENDER	text,casesensitive
ADDRESS	-Geocodablestreetaddress(city,state,zipandneighborhoodautogenerated)
PLOTTYPE-oneofthedbplotchoices,casesensitive
PLOTLENGTH-number,feet
PLOTWIDTH-number,feet
POWERLINE-True/False
OWNER	-propertyortreeownername,notasiteuser
STEWARD	-stewardname,notasiteuser
SPONSOR	-sponsororganizationorindividual
DATEPLANTED    postgres-recognizabledateformat
DIAMETER-number,inches
HEIGHT	-number,feet
CANOPYHEIGHT-number,feet
CONDITION-oneofthedbconditionchoices,casesensitive
CANOPYCONDITION	-oneofthedbcanopyconditionchoices,casesensitive
PROJECT1-text,oneofdbspecialprojectnames,casesensitive
PROJECT2-text,oneofdbspecialprojectnames,casesensitive
PROJECT3-text,oneofdbspecialprojectnames,casesensitive

["ID","POINT_X","POINT_Y","SCIENTIFIC","ADDRESS","PLOTTYPE","PLOTLENGTH","PLOTWIDTH","POWERLINE","OWNER","STEWARD","SPONSOR","DATEPLANTED","DIAMETER","HEIGHT","CANOPYHEIGHT","CONDITION","CANOPYCONDITION"])
"""

sourceFile='trees_set1.csv'
destFile='tree-set1-formatted.csv'
errFile = sourceFile + '.err'

def parse():
    sourceFile='../data/trees_set1.csv'
    destFile='../data/tree-set1-formatted.csv'
    errFile = sourceFile + '.err'

    CsvFile = csv.reader(open(join(sourceFile), "r"), delimiter=",")
    header = CsvFile.next()
    f= file(destFile,'w')
    of = csv.writer(f, quoting=csv.QUOTE_NONNUMERIC)
    errFile = csv.writer(open(errFile,'w'))

    of.writerow(["ID","POINT_X","POINT_Y","SCIENTIFIC","ADDRESS","PLOTTYPE","PLOTLENGTH","PLOTWIDTH","POWERLINE","OWNER","STEWARD","SPONSOR","DATEPLANTED","DIAMETER","HEIGHT","CANOPYHEIGHT","CONDITION","CANOPYCONDITION"])

    #of.writerow(['genus','species','cultivar','gender','common_name','usda_code','itree_code','flowering','flower_time','fall_color','edible','fruiting_time','wildlife','native','webpage_link'])

    import pdb; pdb.set_trace();
    for row in CsvFile:
        try:
            # inputfile schema:  Area name,Description,Name,Longitude,Lattitude,Girth in cms.,Height in feet,Canopy diameter in meter,Age(aproximately),Flower,Fruit,Pods,Nest,Hole in the bark,Diseased,Heavily lopped,If you find nails,Tree guard choking mention,Healthy,OS/T/C/CS,"A=nillB=2 feetc=2-4 feetD=4-6 feetE= 6 feet above",Grow on wall,Grow on Drainage,other,Regarding Society name,Bunch of trees or other,Geotagged Tree_in_focus photograph,Panorama of trees photograph,trees normal photograph

            mapping = {'Agarkar':'3630','Ghole Road':'2402','Rasshala':'3604','Sambhaji':'2401'}
            id1 = mapping[row[0]]
            id2 = (4-len(str(row[1])))*'0'+row[1]
            _id= int(id1+id2)
            lon = float(row[3])
            lat=float(row[4])
            try:
                sci_name = Species.objects.get(common_name=row[2]).scientific_name
                genus = sci_name.split(" ")[0]
                species = sci_name.split(" ")[1]
            except:
                # if no direct match found, search wider
                sci_name= Species.objects.filter(common_name__icontains=row[2])
                if sci_name:
                    sci_name= sci_name[0].scientific_name
                    genus = sci_name.split(" ")[0]
                    species = sci_name.split(" ")[1]                
                else:
                    sci_name=""
                    genus = ""
                    species = ""                                      
            cultivar=""
            gender=""
            address=""
            owner=""
            
            diameter=floor(float(row[5])*0.393701) #convert to inches  ..aka girth... need to check this value against diameter in import code..     
            height= int(row[6])
            condition='fair'
            of.writerow([_id,lat,lon,genus,species,cultivar,gender,address,'','','','','','','',diameter,height,'',condition,'','','',])
        except:            
            print "!",
            import sys
            #print sys.exc_info()[1], row; break;
            errFile.writerow([sys.exc_info()[1], row])

def check_unique(pos):
    """
    Checks the csv file for unique values in a given column position in each row.
    Outputs a list of values and no. of occurences
    """
    CsvFile = csv.reader(open(join(sourceFile), "r"), delimiter=",")
    
    row = CsvFile.next()
    colcount = len(row)
    print colcount
    acc1= []
    for row in CsvFile:
        acc1.append(row[colcount-1])        
        print {'allvals': len(acc1), 'set':len(set(acc1))}


def android_data_parse(sourceFile):
    sourceFile = sourceFile.split('/')
    sourceFile= sourceFile[len(sourceFile)-1]
    
    import os
    directory = "../data/parsedtreedata"
    if not os.path.exists(directory):
        os.makedirs(directory)        
        
    sourceFile= os.path.join('../data/', sourceFile)
    destFile= str(sourceFile.replace('.csv','')) + '_otm.csv'
    errFile = sourceFile + '.err'

    CsvFile = csv.reader(open(join(sourceFile), "r"), delimiter=",")
    header = CsvFile.next()
    f= file(destFile,'w')
    of = csv.writer(f, quoting=csv.QUOTE_NONNUMERIC)
    errFile = csv.writer(open(errFile,'w'))

    of.writerow(["ID","POINT_X","POINT_Y","SCIENTIFIC","ADDRESS","PLOTTYPE","PLOTLENGTH","PLOTWIDTH","POWERLINE","OWNER","STEWARD","SPONSOR","DATEPLANTED","DIAMETER","HEIGHT","CANOPYHEIGHT","CONDITION","CANOPYCONDITION", "GIRTH_CM", "GIRTH_M", "HEIGHT_FT", "HEIGHT_M", "NEST", "BURROWS", "FLOWERS", "FRUITS", "NAILS", "POSTER", "WIRES", "TREE_GUARD", "NUISANCE", "NUISANCE_DESC", "HEALTH_OF_TREE", "FOUND_ON_GROUND", "GROUND_DESCRIPTION", "RISK_ON_TREE", "RISK_DESC", "RARE", "ENDANGERED", "VULNERABLE", "PEST_AFFECTED", "REFER_TO_DEPT", "SPECIAL_OTHER", "SPECIAL_OTHER_DESCRIPTION", "LATITUDE", "LONGITUDE","PRABHAG_ID","CLUSTER_ID", "CREATION_DATE", "DEVICE_ID", "TIME", "DATE"])

# "GIRTH_CM", "GIRTH_M", "HEIGHT_FT", "HEIGHT_M", "NEST", "BURROWS", "FLOWERS", "FRUITS", "NAILS", "POSTER", "WIRES", "TREE_GUARD", "NUISANCE", "NUISANCE_DESC", "HEALTH_OF_TREE", "FOUND_ON_GROUND", "GROUND_DESCRIPTION", "RISK_ON_TREE", "RISK_DESC", "RARE", "ENDANGERED", "VULENRABLE", "PEST_AFFECTED", "REFER_TO_DEPT", "SPECIAL_OTHER", "SPECIAL_OTHER_DESCRIPTION", "LATITUDE", "LONGITUDE", "CREATION_DATE", "DEVICE_ID", "TIME", "DATE" 

    #import pdb; pdb.set_trace();
    for row in CsvFile:
        try:
            schema = '_id, form_no, prop_id, tree_no, tree_name, botanical_name, girth_cm, girth_m, height_ft, height_m, nest, burrows, flowers, fruits, nails, poster, wires, tree_guard, nuisance, nuisance_desc, health_of_tree, found_on_ground, ground_description, risk_on_tree, risk_desc, rare, endangered, vulnerable, pest_affected, refer_to_dept, special_other, special_other_description, latitude, longitude, creation_date, device_id, time, date'.split(', ')
            
            #ID=form_no*100000+tree_no (3_15 consider it as 315*100000+tree_no).
            # strip space in data
            row = [ r.strip() for r in row ]

            _id = int(row[schema.index('form_no')].replace('_',''))*100000+int(row[schema.index('tree_no')])
            point_x = row[schema.index('longitude')]
            point_y = row[schema.index('latitude')]            
            scientific = str(row[schema.index('botanical_name')])
            try:
                genus = scientific.split(" ")[0]
                species = scientific.split(" ")[1]          
            except:
                pass
            cultivar=""
            gender=""
            address=""
            plottype = row[schema.index('found_on_ground')]
            prabhag_id= row[schema.index('form_no')].split('_')[0]
            cluster_id= row[schema.index('form_no')].split('_')[1]
            plotlength=""
            plotwidth=""
            powerline = "2" if row[schema.index('wires')] == 'F' else "1"
            owner=""
            steward=""
            sponsor=""
            dateplanted=""
            diameter = floor((float(row[schema.index('girth_m')])/3.15)*39.37) #convert to circular diameter from girth  
            height= float(row[schema.index('height_ft')])
            condition= row[schema.index('health_of_tree')]
            canopyheight=""
            canopycondition=""
            tree_number = row[schema.index("tree_no")]
            girth_cm = float(row[schema.index("girth_cm")])
            girth_m = float(row[schema.index("girth_m")])
            height_ft = float(row[schema.index("height_ft")])
            height_m = float(row[schema.index("height_m")])
            nest = "1" if row[schema.index("nest")] == 'T' else "2"
            burrows = "1" if row[schema.index("burrows")] == 'T' else "2"
            flowers = "1" if row[schema.index("flowers")] == 'T' else "2"
            fruits = "1" if row[schema.index("fruits")] == 'T' else "2"
            nails = "1" if row[schema.index("nails")] == 'T' else "2"
            poster = "1" if row[schema.index("poster")] == 'T' else "2"
            wires = "1" if row[schema.index("wires")] == 'T' else "2"
            tree_guard = "1" if row[schema.index("tree_guard")] == 'T' else "2"
            nuisance = "1" if row[schema.index("nuisance")] == 'T' else "2"
            nuisance_desc = "" if row[schema.index("nuisance_desc")] == "nil" else row[schema.index("nuisance_desc")]
            health_of_tree = row[schema.index("health_of_tree")]
            found_on_ground = row[schema.index("found_on_ground")]
            ground_description = row[schema.index("ground_description")]
            risk_on_tree = "" if row[schema.index("risk_on_tree")] == "nil" else row[schema.index("risk_on_tree")] 
            risk_desc = "" if row[schema.index("risk_desc")] == "nil" else row[schema.index("risk_desc")]
            rare = "1" if row[schema.index("rare")] == 'T' else "2"
            endangered = "1" if row[schema.index("endangered")] == 'T' else "2"
            vulnerable = "1" if row[schema.index("vulnerable")] == 'T' else "2"
            pest_affected = "1" if row[schema.index("pest_affected")] == 'T' else "2"
            refer_to_dept = "1" if row[schema.index("refer_to_dept")] == 'T' else "2"
            special_other = "1" if row[schema.index("special_other")] == 'T' else "2"
            special_other_description =  "" if row[schema.index("special_other_description")] == "nil" else row[schema.index("special_other_description")] 
            latitude = row[schema.index("latitude")]
            longitude = row[schema.index("longitude")]
            creation_date = row[schema.index("creation_date")]
            device_id = row[schema.index("device_id")]
            time = row[schema.index("time")]
            date = row[schema.index("date")]

            of.writerow([_id,point_x,point_y,scientific,address,plottype,plotlength,plotwidth,powerline,owner,steward,sponsor,dateplanted,diameter,height,canopyheight,condition,canopycondition,girth_cm, girth_m, height_ft, height_m, nest, burrows, flowers, fruits, nails, poster, wires, tree_guard, nuisance, nuisance_desc, health_of_tree, found_on_ground, ground_description, risk_on_tree, risk_desc, rare, endangered, vulnerable, pest_affected, refer_to_dept, special_other, special_other_description, latitude, longitude, prabhag_id, cluster_id, creation_date, device_id, time, date ])
            
        except:            
            print "!",
            import sys
            print sys.exc_info()[1], row; #break;
            errFile.writerow([sys.exc_info()[1], row])


if (__name__=="__main__"):
    #check_unique()
    #parse()
    android_data_parse('../data/testin.csv')

